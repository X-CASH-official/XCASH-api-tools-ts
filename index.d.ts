import * as xcashInterfaces from './interfaces';
export * as xcashInterfaces from './interfaces';
export declare function Initialize(data1: string, data2: string): void;
export declare function Blockchain_get_block_count(): Promise<xcashInterfaces.BlockchainGetBlockCount>;
export declare function Blockchain_get_block_hash(): Promise<xcashInterfaces.BlockchainGetBlockHash>;
export declare function Blockchain_get_block_template(height: number): Promise<xcashInterfaces.BlockchainGetBlockTemplate>;
export declare function Blockchain_get_last_block_header(): Promise<xcashInterfaces.BlockchainGetLastBlockHeader>;
export declare function Blockchain_get_block_header_by_hash(height: number): Promise<xcashInterfaces.BlockchainGetBlockHeaderByHash>;
export declare function Blockchain_get_block_header_by_height(height: number): Promise<xcashInterfaces.BlockchainGetBlockHeaderByHeight>;
export declare function Blockchain_get_block_headers_range(startHeight: number, endHeight: number): Promise<xcashInterfaces.BlockchainGetBlockHeadersRange>;
export declare function Blockchain_get_block(height: number): Promise<xcashInterfaces.BlockchainGetBlock>;
export declare function Blockchain_get_info(): Promise<xcashInterfaces.BlockchainGetInfo>;
export declare function Blockchain_hard_fork_info(): Promise<xcashInterfaces.BlockchainHardForkInfo>;
export declare function Blockchain_version(): Promise<xcashInterfaces.BlockchainGetVersion>;
export declare function Blockchain_get_tx(tx: string): Promise<xcashInterfaces.BlockchainGetTx>;
export declare function DPOPS_vote(delegate: string, amount: number): Promise<xcashInterfaces.DPOPSVote>;
export declare function DPOPS_revote(amount: number): Promise<xcashInterfaces.DPOPSRevote>;
export declare function DPOPS_vote_status(): Promise<xcashInterfaces.DPOPSVoteStatus>;
export declare function DPOPS_delegate_register(delegate: string, IP: string, key: string): Promise<xcashInterfaces.DPOPSDelegateRegister>;
export declare function DPOPS_delegate_update(item: string, value: string): Promise<xcashInterfaces.DPOPSDelegateUpdate>;
export declare function Blockchain_get_balance(): Promise<xcashInterfaces.BlockchainGetBalance>;
export declare function Blockchain_get_address(): Promise<xcashInterfaces.BlockchainGetAddress>;
export declare function Blockchain_get_address_index(address: string): Promise<xcashInterfaces.BlockchainGetAddressIndex>;
export declare function Blockchain_create_address(index: number): Promise<xcashInterfaces.BlockchainCreateAddress>;
export declare function Blockchain_get_height(): Promise<xcashInterfaces.BlockchainGetHeight>;
export declare function Blockchain_transfer_split(address: string[], amount: number[]): Promise<xcashInterfaces.BlockchainTransferSplit>;
export declare function Blockchain_sweep_all(address: string): Promise<xcashInterfaces.BlockchainSweepAll>;
export declare function Blockchain_get_payments(payment_id: string): Promise<xcashInterfaces.BlockchainGetPayments>;
export declare function Blockchain_incoming_transfers(transfer_type: string): Promise<xcashInterfaces.BlockchainIncomingTransfers>;
export declare function Blockchain_query_key(key_type: string): Promise<xcashInterfaces.BlockchainQueryKey>;
export declare function Blockchain_make_integrated_address(address: string, payment_id: string): Promise<xcashInterfaces.BlockchainMakeIntegratedAddress>;
export declare function Blockchain_split_integrated_address(integrated_address: string): Promise<xcashInterfaces.BlockchainSplitIntegratedAddress>;
export declare function Blockchain_rescan_blockchain(): Promise<xcashInterfaces.BlockchainRescanBlockchain>;
export declare function Blockchain_get_tx_key(tx: string): Promise<xcashInterfaces.BlockchainGetTxKey>;
export declare function Blockchain_check_tx_key(tx: string, key: string, address: string): Promise<xcashInterfaces.BlockchainCheckTxKey>;
export declare function Blockchain_get_tx_proof(tx: string, address: string, message: string): Promise<xcashInterfaces.BlockchainGetTxProof>;
export declare function Blockchain_check_tx_proof(tx: string, address: string, message: string, signature: string): Promise<xcashInterfaces.BlockchainCheckTxProof>;
export declare function Blockchain_get_spend_proof(tx: string, message: string): Promise<xcashInterfaces.BlockchainGetSpendProof>;
export declare function Blockchain_check_spend_proof(tx: string, message: string, signature: string): Promise<xcashInterfaces.BlockchainCheckSpendProof>;
export declare function Blockchain_get_reserve_proof(all: string, amount: string, message: string): Promise<xcashInterfaces.BlockchainGetReserveProof>;
export declare function Blockchain_check_reserve_proof(address: string, signature: string, message: string): Promise<xcashInterfaces.BlockchainCheckReserveProof>;
export declare function Blockchain_sign(message: string): Promise<xcashInterfaces.BlockchainSign>;
export declare function Blockchain_verify(message: string, address: string, signature: string): Promise<xcashInterfaces.BlockchainVerify>;
export declare function Blockchain_rescan_spent(): Promise<xcashInterfaces.BlockchainRescanSpent>;
export declare function Blockchain_validate_address(address: string): Promise<xcashInterfaces.BlockchainValidateAddress>;
export declare function Blockchain_create_wallet(filename: string, password: string): Promise<xcashInterfaces.BlockchainCreateWallet>;
export declare function Blockchain_open_wallet(filename: string, password: string): Promise<xcashInterfaces.BlockchainOpenWallet>;
export declare function Blockchain_close_wallet(): Promise<xcashInterfaces.BlockchainCloseWallet>;
export declare function Blockchain_change_wallet_password(old_password: string, new_password: string): Promise<xcashInterfaces.BlockchainChangeWalletPassword>;
export declare function Namespace_update_remote_data(item: string, value: string): Promise<xcashInterfaces.NamespaceUpdateRemoteData>;
export declare function Namespace_remote_data_save_name(name: string): Promise<xcashInterfaces.NamespaceRemoteDataSaveName>;
export declare function Namespace_remote_data_purchase_name(saddress: string, saddress_signature: string, paddress: string, paddress_signature: string, tx_hash: string): Promise<xcashInterfaces.NamespaceRemoteDataPurchaseName>;
export declare function Namespace_remote_data_delegate_set_amount(amount: string): Promise<xcashInterfaces.NamespaceRemoteDataDelegateSetAmount>;
export declare function Namespace_remote_data_renewal_start(): Promise<xcashInterfaces.NamespaceRemoteDataRenewalStart>;
export declare function Namespace_remote_data_renewal_end(tx: string): Promise<xcashInterfaces.NamespaceRemoteDataRenewalEnd>;
export declare function API_Blockchain_stats(): Promise<xcashInterfaces.APIBlockchainStats>;
export declare function API_Blockchain_block_data(height: number): Promise<xcashInterfaces.APIBlockchainBlockData>;
export declare function API_Blockchain_tx_data(tx: string): Promise<xcashInterfaces.APIBlockchainTxData>;
export declare function API_Blockchain_prove_tx(tx: string, address: string, key: string): Promise<xcashInterfaces.APIBlockchainProveTx>;
export declare function API_Blockchain_prove_balance(address: string, signature: string): Promise<xcashInterfaces.APIBlockchainProveBalance>;
export declare function API_Blockchain_tx_history(tx_type: string, address: string): Promise<xcashInterfaces.APIBlockchainTxHistory>;
export declare function API_Blockchain_validate_address(address: string): Promise<xcashInterfaces.APIBlockchainValidateAddress>;
export declare function API_Blockchain_create_integrated_address(address: string, payment_id: string): Promise<xcashInterfaces.APIBlockchainCreateIntegratedAddress>;
export declare function API_DPOPS_stats(): Promise<xcashInterfaces.APIDPOPSStats>;
export declare function API_DPOPS_registered_delegates(): Promise<xcashInterfaces.APIDPOPSDelegates>;
export declare function API_DPOPS_online_delegates(): Promise<xcashInterfaces.APIDPOPSDelegates>;
export declare function API_DPOPS_active_delegates(): Promise<xcashInterfaces.APIDPOPSDelegates>;
export declare function API_DPOPS_delegate(delegate: string): Promise<xcashInterfaces.APIDPOPSDelegate>;
export declare function API_DPOPS_delegate_round_stats(delegate: string): Promise<xcashInterfaces.APIDPOPSDelegateRoundStats>;
export declare function API_DPOPS_delegates_votes(delegate: string, start: string, limit: string): Promise<xcashInterfaces.APIDPOPSDelegatesVotes>;
export declare function API_DPOPS_vote_detail(address: string): Promise<xcashInterfaces.APIDPOPSVoteDetails>;
export declare function API_DPOPS_round_detail(height: number): Promise<xcashInterfaces.APIDPOPSRoundDetails>;
export declare function API_DPOPS_last_block_producer(): Promise<xcashInterfaces.APIDPOPSLastBlockProducer>;
export declare function API_Namespace_stats(): Promise<xcashInterfaces.APINamespaceStats>;
export declare function API_Namespace_registered_delegates(): Promise<xcashInterfaces.APINamespaceRegisteredDelegates>;
export declare function API_Namespace_delegates(delegate: string): Promise<xcashInterfaces.APINamespaceDelegates>;
export declare function API_Namespace_names(name: string): Promise<xcashInterfaces.APINamespaceName>;
export declare function API_Namespace_name_status(name: string): Promise<xcashInterfaces.APINamespaceNameStatus>;
export declare function API_Namespace_address_status(address: string): Promise<xcashInterfaces.APINamespaceAddressStatus>;
export declare function API_Namespace_name_to_address(name: string): Promise<xcashInterfaces.APINamespaceNameToAddress>;
export declare function API_Namespace_address_to_name(address: string): Promise<xcashInterfaces.APINamespaceAddressToName>;
export declare function API_Xpayment_Twitter_stats(): Promise<xcashInterfaces.APIXpaymentTwitterStats>;
export declare function API_Xpayment_Twitter_stats_per_day(start: number, limit: number): Promise<xcashInterfaces.APIXpaymentTwitterStatsPerDay>;
export declare function API_Xpayment_Twitter_top_stats(amount: number): Promise<xcashInterfaces.APIXpaymentTwitterTopStats>;
export declare function API_Xpayment_Twitter_recent_tips(amount: number, sort: string, sort_type: string): Promise<xcashInterfaces.APIXpaymentTwitterRecentTips>;
